import  os
from    os.path     import join
import  cobra
from    cobra       					import Model, Reaction, Metabolite
from    cobra.flux_analysis.loopless    import add_loopless, loopless_solution
from 	cobra.flux_analysis 			import flux_variability_analysis
from 	optlang 						import Model, Variable, Constraint, Objective
import  numpy       as np
import  scipy       as sp
import  csv         as cp
import pandas as pd
import  sys
import  re
#######################################################################################
# Function Definition
# hvmFluxVar.py takes a host-virus integrated model (generated by genHVM.py) and
# performs a flux variability analysis on it using both 
# host-optimised state (HOS) and a virus-optimised state (VOS)

# Inputs:
# HVM               Integrated host-virus model
# HostRxn           Name of the host objective reaction

# Outputs:
# outputDf          Flux variability results for HOS and VOS (as actual flux ranges)


def hvmFluxVar(HVM,HostRxn,solver):
	"Host-Virus Flux Variability Analysis"

	# [1] Optimise the HVM for host and virus objectives
	# Initial Setup
	HVM.solver = solver										#set solver for all optimisations
	fHost = np.zeros((len(HVM.reactions),1))				#create data structures			
	fVirus = np.zeros((len(HVM.reactions),1))
	hostIdx = next(index for index, reaction in enumerate(HVM.reactions) if reaction.id == HostRxn)
	virusIdx    = len(HVM.reactions) - 1
	objIdx      = [hostIdx,virusIdx]
	reaction_Names = [None]*len(HVM.reactions)
	for ii in range(len(HVM.reactions)):
		reaction_Names[ii] = HVM.reactions[ii].id

	# [2] State Optimisations
	######
	# Host optimisation #
	hostObj         = HVM.reactions[hostIdx]
	HVM.objective   = hostObj.id
	virusLb     = HVM.reactions[virusIdx].lower_bound	#store original bounds for virus biomass reaction
	virusUb     = HVM.reactions[virusIdx].upper_bound
	HVM.reactions[virusIdx].lower_bound = 0				# Zero-bound virus biomass reaction
	HVM.reactions[virusIdx].upper_bound = 0
	hostSol         = HVM.optimize()					#optimise model for host biomass
	hostFVA         = cobra.flux_analysis.flux_variability_analysis(HVM)					#perform FVA on model using host biomass
	# Record Optima and fluxes
	xHost       = hostSol.objective_value                # Host-optimal biomass flux
	fHost       = hostSol.fluxes               			# Host-optimal flux values
	# Return virus reaction to correct bounds
	HVM.reactions[virusIdx].lower_bound = virusLb
	HVM.reactions[virusIdx].upper_bound = virusUb
	print("Host optimization objective: {}".format(hostSol))

	# Virus Optimisation #
	virusObj        = HVM.reactions[-1]
	HVM.objective   = virusObj.id
	hostLb     = HVM.reactions[hostIdx].lower_bound	#store original bounds for virus biomass reaction
	hostUb     = HVM.reactions[hostIdx].upper_bound
	HVM.reactions[hostIdx].lower_bound = 0				# Zero-bound virus biomass reaction
	HVM.reactions[hostIdx].upper_bound = 0
	virusSol        = HVM.optimize()
	virusFVA         = cobra.flux_analysis.flux_variability_analysis(HVM)					#perform FVA on model using virus biomass
	# Record Optima and fluxes
	xVirus       = virusSol.objective_value                # virus-optimal biomass flux
	fVirus       = virusSol.fluxes               			# virus-optimal flux values
	# Return host reaction to correct bounds
	HVM.reactions[hostIdx].lower_bound = hostLb
	HVM.reactions[hostIdx].upper_bound = hostUb
	print("Virus optimization objective: {}".format(virusSol))

	# [3] Outputs
	# Create output data frame with flux comparison
	hostFVA = hostFVA.assign(rxnName=reaction_Names)
	virusFVA = virusFVA.assign(rxnName=reaction_Names)
	
	return(hostFVA,virusFVA)

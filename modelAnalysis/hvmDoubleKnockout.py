import  os
from    os.path     import join
import  cobra
from    cobra       import Model, Reaction, Metabolite
from cobra.flux_analysis.loopless import loopless_solution
from cobra.util.solver import linear_reaction_coefficients
import  numpy       as np
import  scipy       as sp
import  csv         as cp
import pandas as pd
import  sys
import  re
#######################################################################################
# Function Definition
# hvmDoubleKnockout Evaluates the effect of enforcing a knockout state on two reacions
# on virus production (model generated by genHVM.py)

# Inputs:
# HVM               Integrated host-virus model
# HostRxn           Name of the host objective reaction

# Outputs:
# outputDf          Data frame with knocked out reactions and resulting virus optima
def hvmDoubleKnockout(HVM,HostRxn,koVirus,solver):
	"""Reaction Double Knockouts
	new by OSS"""

	# [1] Optimise the HVM for host and virus objectives
	# Initial Setup
	HVM.solver = solver										#set solver for all optimisations
	hostIdx = next(index for index, reaction in enumerate(HVM.reactions) if reaction.id == HostRxn)
	virusIdx    = len(HVM.reactions) - 1
	objIdx      = [hostIdx, virusIdx]
	virusRxn = HVM.reactions[-1].id

	# Host Optimisation
	hostObj     = HVM.reactions[hostIdx]
	HVM.objective   = hostObj.id
	hostSol     = HVM.optimize()

	# Virus Optimisation
	virusObj    = HVM.reactions[-1]
	HVM.objective   = virusObj.id
	virusSol    = HVM.optimize()

	# [2] Knockout Analysis
	#Initiate data structures
	reactionA_Index = [None]
	reactionA_Names = [None]
	reactionB_Names = [None]
	reactionB_Index = [None]
	doubleKO_optimaVirus = [None]
	doubleKO_optimaHost = [None]

	# Initiate loop
	nbofReactions = len(HVM.reactions)
	for ii in range(0,nbofReactions):
		# Conditional to exclude objective reactions and those that carry zero flux for virus optima
		if ((ii!=hostIdx) and (ii!=virusIdx) and (virusSol.fluxes[ii]!=0.0) and (koVirus.virus_optima_KO[ii]!=0.0) and (not HVM.reactions[ii].id.startswith("EX_"))):
			# Store the bounds for rxn A
			tempLB_A = HVM.reactions[ii].lower_bound
			tempUB_A = HVM.reactions[ii].upper_bound
			# Alter bounds of rxn A to zero
			HVM.reactions[ii].lower_bound = 0
			HVM.reactions[ii].upper_bound = 0
			for jj in range(ii+1,nbofReactions):
				# Conditional to exclude objective reactions and reactions that carry zero flux for virus optima and reactions that gave zero flux when knocked out on their own
				if ((jj!=hostIdx) and (jj!=virusIdx) and (virusSol.fluxes[jj]!=0.0) and (koVirus.virus_optima_KO[jj]!=0.0) and (not HVM.reactions[jj].id.startswith("EX_"))):
					print("Double Knockout: \t%i\t%s\t%i\t%s" % (ii, HVM.reactions[ii].id, jj, HVM.reactions[jj].id))
					# Store reaction info
					reactionA_Index.append(ii)
					reactionA_Names.append(HVM.reactions[ii].id)
					reactionB_Index.append(jj)
					reactionB_Names.append(HVM.reactions[jj].id)
					# Store the bounds for rxn B
					tempLB_B = HVM.reactions[jj].lower_bound
					tempUB_B = HVM.reactions[jj].upper_bound
					# Alter bounds of rxn B to zero
					HVM.reactions[jj].lower_bound = 0
					HVM.reactions[jj].upper_bound = 0
					# Optimise the model for virus production
					HVM.objective   = virusObj.id
					doubleKO_optimaVirus.append((HVM.slim_optimize() / virusSol.objective_value) * 100)
					# Optimise the model for host production
					HVM.objective   = hostObj.id
					doubleKO_optimaHost.append((HVM.slim_optimize() / hostSol.objective_value) * 100)
					# Return rxn B to original bounds
					HVM.reactions[jj].lower_bound = tempLB_B
					HVM.reactions[jj].upper_bound = tempUB_B
			# Return rxn A to original bounds
			HVM.reactions[ii].lower_bound = tempLB_A
			HVM.reactions[ii].upper_bound = tempUB_A
	print("done")

	# [4] Output
	outputDf = pd.DataFrame(data=reactionA_Index, columns=["rxnAid"])
	outputDf = outputDf.assign(rxnAname=reactionA_Names)
	outputDf = outputDf.assign(rxnBid=reactionB_Index)
	outputDf = outputDf.assign(rxnBname=reactionB_Names)
	outputDf = outputDf.assign(doubleKOoptimaVirus=doubleKO_optimaVirus)
	outputDf = outputDf.assign(doubleKOoptimaHost=doubleKO_optimaHost)
	return outputDf

import  os
from    os.path     import join
import  cobra
from    cobra       import Model, Reaction, Metabolite
from    cobra.flux_analysis.loopless       import add_loopless, loopless_solution
import  numpy       as np
import  scipy       as sp
import  csv         as cp
import pandas as pd
import  sys
import  re
#######################################################################################
# Function Definition
# hvmCompare.py takes a host-virus integrated model (generated by genHVM.py) and
# compares the prediction of a host-optimised system (HOS) with that of a virus-
# optimised system (VOS)

# Inputs:
# HVM               Integrated host-virus model
# HostRxn           Name of the host objective reaction

# Outputs:
# hvmComp           Comparison of HOS and VOS flux values (as % total flux)
# hvmStat           Reaction stats for HOS and VOS states:
#                   - Upregulated
#                   - Downregulated
#                   - Activated
#                   - Inactivated
#                   - Reversed

def hvmCompare(HVM,HostRxn,solver):
	"Host-Virus Comparison"

	# [1] Optimise the HVM for host and virus objectives
	# Initial Setup
	HVM.solver = solver
	hostIdx = next(index for index, reaction in enumerate(HVM.reactions) if reaction.id == HostRxn)
	virusIdx    = len(HVM.reactions) - 1
	objIdx      = [hostIdx,virusIdx]

	# Host Optimisation
	hostObj         = HVM.reactions[hostIdx]
	HVM.objective   = hostObj.id
	hostSol         = HVM.optimize()

	# Virus Optimisation
	virusObj        = HVM.reactions[-1]
	HVM.objective   = virusObj.id
	virusSol        = HVM.optimize()

	# [2] Convert fluxes to % total flux for HOS and VOS
	# Conserve directionality information while doing so
	revHost = np.zeros((len(HVM.reactions),1))
	revVirus = np.zeros((len(HVM.reactions),1))
	pHOSfluxes = np.zeros((len(HVM.reactions),1))
	pVOSfluxes = np.zeros((len(HVM.reactions),1))
	fHost = np.zeros((len(HVM.reactions),1))
	fHostSum = 0.0
	fVirus = np.zeros((len(HVM.reactions),1))
	fVirusSum = 0.0
	reaction_Names = [None]*len(HVM.reactions)
	for ii in range(len(HVM.reactions)):
		reaction_Names[ii] = HVM.reactions[ii].id
		fHost[ii] = hostSol.fluxes[ii]						#store original flux
		pHOSfluxes[ii]  = np.absolute(hostSol.fluxes[ii])	#assign absolute value to storage array
		fHostSum = fHostSum + pHOSfluxes[ii]				#sum up absolute values
		fVirus[ii] = virusSol.fluxes[ii]
		pVOSfluxes[ii]  = np.absolute(virusSol.fluxes[ii])
		fVirusSum = fVirusSum + pVOSfluxes[ii]
		if hostSol.fluxes[ii] < 0:
			revHost[ii] = 1
		if virusSol.fluxes[ii] < 0:
			revVirus[ii] = 1

	# Convert to % flux of total and apply directionality
	for ii in range(len(HVM.reactions)):
		pHOSfluxes[ii]  = (pHOSfluxes[ii] / fHostSum) * 100
		pVOSfluxes[ii]  = (pVOSfluxes[ii] / fVirusSum) * 100
		if revHost[ii] == 1:
			pHOSfluxes[ii] = pHOSfluxes[ii] * -1
		if revVirus[ii] == 1:
			pVOSfluxes[ii] = pVOSfluxes[ii] * -1

	# [3] Reaction statistics
	tol    = 1.05
	ntol   = -1.05
	inff   = np.inf
	cutOff = 0.00000001
	# Calculate the number of reactions, for each reaction state
	test = 0
	urRxns = 0
	drRxns = 0
	avRxns = 0
	iaRxns = 0
	reRxns = 0

	# Initiate loop
	nbofReactions = len(HVM.reactions)
	for ii in range(len(HVM.reactions)):
		print("{}/{}\tFluxComparison: {}\t".format(ii, nbofReactions, HVM.reactions[ii].id))
		if ((np.absolute(pHOSfluxes[ii])>0) and (np.absolute(pVOSfluxes[ii])>0) and ((pVOSfluxes[ii] / pHOSfluxes[ii])>tol) and ((pVOSfluxes[ii] / pHOSfluxes[ii])<inff)):
			urRxns = urRxns + 1
		if ((np.absolute(pHOSfluxes[ii])>0) and (np.absolute(pVOSfluxes[ii])>0) and ((pHOSfluxes[ii] / pVOSfluxes[ii])>tol) and ((pHOSfluxes[ii] / pVOSfluxes[ii])<inff)):
			drRxns = drRxns + 1
		if ((np.absolute(pHOSfluxes[ii])<cutOff) and (np.absolute(pVOSfluxes[ii])>cutOff)):
			avRxns = avRxns + 1
		if ((np.absolute(pHOSfluxes[ii])>cutOff) and (np.absolute(pVOSfluxes[ii])<cutOff)):
			iaRxns = iaRxns + 1
		if ((pHOSfluxes[ii]>0 and pVOSfluxes[ii]<0) or (pHOSfluxes[ii]<0 and pVOSfluxes[ii]>0)):
			reRxns = reRxns + 1

	# [4] Outputs
	# Create output data frame with flux comparison
	outputDf_flux = pd.DataFrame(data=reaction_Names,columns=["rxnName"])
	outputDf_flux = outputDf_flux.assign(hostFlux=fHost)
	outputDf_flux = outputDf_flux.assign(virusFlux=fVirus)
	outputDf_flux = outputDf_flux.assign(hostFlux_norm=pHOSfluxes)
	outputDf_flux = outputDf_flux.assign(virusFlux_norm=pVOSfluxes)
	
	# Create hvmStat
	outputDf_summary = pd.DataFrame(data=[(urRxns,drRxns,avRxns,iaRxns,reRxns)],columns=["N_Upregulated","N_downRegulated","N_activated","N_inactivated","N_reversed"])


	return(outputDf_flux,outputDf_summary)
